generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema", "omitApi"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  schemas   = ["public", "next_auth"]
  directUrl = env("DIRECT_URL")
}

model accounts {
  id                 String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         BigInt?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  userId             String? @db.Uuid
  users              users?  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([provider, providerAccountId], map: "provider_unique")
  @@schema("next_auth")
}

model sessions {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  expires      DateTime @db.Timestamptz(6)
  sessionToken String   @unique(map: "sessiontoken_unique")
  userId       String?  @db.Uuid
  users        users?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("next_auth")
}

model users {
  id            String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String?
  email         String?    @unique(map: "email_unique")
  emailVerified DateTime?  @db.Timestamptz(6)
  image         String?
  accounts      accounts[]
  sessions      sessions[]

  @@schema("next_auth")
}

model verification_tokens {
  identifier String?
  token      String   @id
  expires    DateTime @db.Timestamptz(6)

  @@unique([token, identifier], map: "token_identifier_unique")
  @@schema("next_auth")
}

enum LabelProjectsType {
  USER
  SYSTEM

  @@schema("public")
}

model Projects {
  id     Int               @id @default(autoincrement())
  userId String
  name   String
  type   LabelProjectsType
  Todos  Todos[]

  @@map("projects")
  @@schema("public")
}

model Labels {
  id        Int               @id @default(autoincrement())
  name      String
  type      LabelProjectsType
  todos     Todos[]           @relation("TodoLabels")
  TodoLabel TodoLabel[]

  @@map("labels")
  @@schema("public")
}

model Todos {
  id          Int      @id @default(autoincrement())
  userId      String
  projectId   Int?
  taskName    String
  description String?
  dueDate     DateTime
  priority    String?
  isCompleted Boolean  @default(false)
  parentId    Int?     @unique

  project   Projects?   @relation(fields: [projectId], references: [id])
  parent    Todos?      @relation("TodoHierarchy", fields: [parentId], references: [id])
  subTodos  Todos[]     @relation("TodoHierarchy")
  labels    Labels[]    @relation("TodoLabels")
  TodoLabel TodoLabel[]

  @@map("todos")
  @@schema("public")
}

model TodoLabel {
  todoId  Int
  labelId Int
  todo    Todos  @relation(fields: [todoId], references: [id])
  label   Labels @relation(fields: [labelId], references: [id])

  @@id([todoId, labelId])
  @@schema("public")
}
